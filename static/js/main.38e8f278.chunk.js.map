{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","routes/Detail.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoding","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","About","props","console","log","Navigation","Detail","location","history","undefined","push","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"mYA2CeA,MAtCf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,gBACVC,MAAO,CAAEP,OAAMD,QAAOE,UAASC,SAAQC,YAGzC,yBAAKK,IAAKN,EAAQO,IAAKV,EAAOA,MAAOA,IAErC,yBAAKK,UAAU,eACb,wBAAIA,UAAU,gBAAgBL,GAC9B,wBAAIK,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,iBACXD,EAAOO,KAAI,SAACC,EAAOC,GAClB,OACE,wBAAIC,IAAKD,EAAOR,UAAU,gBACvBO,OAKT,uBAAGP,UAAU,kBAAkBH,EAAQa,MAAM,EAAG,KAAhD,WC+BKC,G,kNApDbR,MAAQ,CACNS,UAAU,EACVC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,UAAU,IARxB,2C,kEAcVQ,KAAKN,c,+BAGG,IAAD,EACsBM,KAAKjB,MAA1BS,EADD,EACCA,SAAUC,EADX,EACWA,OAElB,OACE,6BAASb,UAAU,aAChBY,EACC,yBAAKZ,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZa,EAAOP,KAAI,SAACe,GAAD,OACV,kBAAC,EAAD,CACEZ,IAAKY,EAAMC,GACXA,GAAID,EAAMC,GACV1B,KAAMyB,EAAMzB,KACZD,MAAO0B,EAAM1B,MACbE,QAASwB,EAAMxB,QACfC,OAAQuB,EAAME,mBACdxB,OAAQsB,EAAMtB,kB,GA3CXyB,IAAMC,Y,qBCSVC,MAZf,SAAeC,GAEX,OADFC,QAAQC,IAAIF,GAER,yBAAK3B,UAAU,oBACX,0DAGA,yD,MCGK8B,MATf,WACI,OACI,yBAAK9B,UAAU,OACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,WCWG8B,E,kLAhBQ,IAAD,EACYX,KAAKO,MAA3BK,EADU,EACVA,SAAUC,EADA,EACAA,aACKC,IAAnBF,EAAS7B,OACX8B,EAAQE,KAAK,O,+BAIP,IACAH,EAAaZ,KAAKO,MAAlBK,SACR,OAAIA,EAAS7B,MACJ,0CAAgB6B,EAAS7B,MAAMR,OAE/B,S,GAbQ6B,IAAMC,WCoBZW,MAbf,WACE,OAGE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,kBAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWb,IAChC,kBAAC,IAAD,CAAOW,KAAK,gBAAgBE,UAAWR,MCZ7CS,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.38e8f278.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Movie({ title, year, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <Link\r\n        to={{\r\n          pathname: \"/movie-detail\",\r\n          state: { year, title, summary, poster, genres },\r\n        }}\r\n      >\r\n        <img src={poster} alt={title} title={title} />\r\n\r\n        <div className=\"moive__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => {\r\n              return (\r\n                <li key={index} className=\"movie__genre\">\r\n                  {genre}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoding: true,\r\n    movies: [],\r\n  };\r\n\r\n  // 데이터 로드 시간을 기다리기 위해 async - await 사용\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    );\r\n    this.setState({ movies, isLoding: false });\r\n  };\r\n\r\n  // 6초 후에 isLoading 값을 false로 바꿈\r\n  componentDidMount() {\r\n    // 영화 데이터 로딩!\r\n    this.getMovies();\r\n  }\r\n\r\n  render() {\r\n    const { isLoding, movies } = this.state;\r\n    // 3항 연산자 { 값? True : False }\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoding ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n              <Movie\r\n                key={movie.id}\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n/* \r\n  영화 앱을 만들기 위한 주석 \r\n\r\n  // react 앱의 생명주기 : Constructor --> render --> ComponentDidMount\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"hello\");\r\n  }\r\n  // state는 반드시 클래스형 컴포넌트 안에서 소문자를 이용해서 사용해야한다.\r\n  // state는 객체형태의 데이터다.\r\n  state = {\r\n    count: 0,\r\n  };\r\n  // add 함수 정의\r\n\r\n  add = () => {\r\n    this.setState((current) => ({\r\n      count: current.count + 1,\r\n    }));\r\n  };\r\n  // minus 함수 정의\r\n\r\n  minus = () => {\r\n    this.setState((current) => ({\r\n      count: current.count - 1,\r\n    }));\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"렌더링 됨\");\r\n  }\r\n\r\n  // 화면이 어떤 이벤트로 인해 Update 될때 실행\r\n  // setState --> render --> componentDidUpdate\r\n  componentDidUpdate() {\r\n    console.log(\"화면 업데이트됨!\");\r\n  }\r\n\r\n  // 컴포넌트가 화면을 떠날 때 실행됨\r\n  componentWillUnmount() {\r\n    console.log(\"Goodbye\");\r\n  }\r\n\r\n  // class는 함수가 아니기 때문에, return문을 사용하려면 render() 함수를 사용해야 한다.\r\n  render() {\r\n    console.log(\"렌더링중\");\r\n    // class를 this로 받음 . <-- 연산자를 사용해서 객체 활용가능\r\n    return (\r\n      <div>\r\n        <h1>The number is: {this.state.count}</h1>\r\n        <button onClick={this.add}>Add</button>\r\n        <button onClick={this.minus}>Minus</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n*/\r\n\r\n/* State를 배우기 위한 주석\r\n\r\n// 실질적으로 사용자에게 보여지는 부분\r\n// name, picture, rating을 App에서 받아옴\r\nfunction Food({ name, picture, rating }) {\r\n  return (\r\n    <div>\r\n      <h2>I like {name} </h2>\r\n      <h4>{rating}/5.0</h4>\r\n      <img src={picture} alt={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// 정보 display에 사용되는 배열\r\nconst foodILike = [\r\n  {\r\n    id: 1,\r\n    name: \"Kimchi\",\r\n    image:\r\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\r\n    rating: 5,\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    name: \"Samgyeopsal\",\r\n    image:\r\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\r\n    rating: 4.9,\r\n  },\r\n\r\n  {\r\n    id: 3,\r\n    name: \"Bibimbap\",\r\n    image:\r\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\r\n    rating: 4.8,\r\n  },\r\n\r\n  {\r\n    id: 4,\r\n    name: \"Doncasu\",\r\n    image:\r\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\r\n    rating: 3.9,\r\n  },\r\n\r\n  {\r\n    id: 5,\r\n    name: \"Kimbap\",\r\n    image:\r\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\r\n    rating: 4.7,\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    //foodILiKe 배열에 map 함수 사용, dish로 받아옴 (1개씩), 각각 새로운 변수에 대입\r\n    <div>\r\n      {foodILike.map((dish) => (\r\n        <Food\r\n          key={dish.id}\r\n          name={dish.name}\r\n          picture={dish.image}\r\n          rating={dish.rating}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// propTypes 모듈 이용 --> type 관련\r\nFood.propTypes = {\r\n  // isRequired : 무조건 존재해야함\r\n  name: PropTypes.string.isRequired,\r\n  picture: PropTypes.string.isRequired,\r\n\r\n  // number로만 끝나면 무조건 존재해야하는 것은 아니지만\r\n  // 가운데 자리에 위치한 number 자료형이여야 한다는 뜻\r\n  rating: PropTypes.number,\r\n};\r\n*/\r\n","import React from \"react\";\r\nimport './About.css';\r\n\r\nfunction About(props) {\r\n  console.log(props);\r\n    return (\r\n      <div className=\"about__container\">\r\n          <span>\r\n              \"Freedom is the freedom\"\r\n          </span>\r\n          <span>- George Orwell, 1984</span>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navigation.css'\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <Link to=\"/\">Home </Link>\r\n            <Link to=\"about\">about</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    const { location, history } = this.props;\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { location } = this.props;\r\n    if (location.state) {\r\n      return <span> title : {location.state.title}</span>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default Detail;\r\n","import React from \"react\";\n// import PropTypes from \"prop-types\";\nimport Home from \"./routes/Home\";\nimport \"./App.css\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Navigation from \"./components/Navigation\";\nimport Detail from \"./routes/Detail\";\n\nfunction App() {\n  return (\n    // HashRouter 때문에 주소창에 #이 붙음\n    // exact = 정확히 url api가 path 일때만 실행되게끔 함.\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie-detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n\n/* \n  영화 앱을 만들기 위한 주석 \n\n  // react 앱의 생명주기 : Constructor --> render --> ComponentDidMount\n  constructor(props) {\n    super(props);\n    console.log(\"hello\");\n  }\n  // state는 반드시 클래스형 컴포넌트 안에서 소문자를 이용해서 사용해야한다.\n  // state는 객체형태의 데이터다.\n  state = {\n    count: 0,\n  };\n  // add 함수 정의\n\n  add = () => {\n    this.setState((current) => ({\n      count: current.count + 1,\n    }));\n  };\n  // minus 함수 정의\n\n  minus = () => {\n    this.setState((current) => ({\n      count: current.count - 1,\n    }));\n  };\n\n  componentDidMount() {\n    console.log(\"렌더링 됨\");\n  }\n\n  // 화면이 어떤 이벤트로 인해 Update 될때 실행\n  // setState --> render --> componentDidUpdate\n  componentDidUpdate() {\n    console.log(\"화면 업데이트됨!\");\n  }\n\n  // 컴포넌트가 화면을 떠날 때 실행됨\n  componentWillUnmount() {\n    console.log(\"Goodbye\");\n  }\n\n  // class는 함수가 아니기 때문에, return문을 사용하려면 render() 함수를 사용해야 한다.\n  render() {\n    console.log(\"렌더링중\");\n    // class를 this로 받음 . <-- 연산자를 사용해서 객체 활용가능\n    return (\n      <div>\n        <h1>The number is: {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  }\n}\n\n*/\n\n/* State를 배우기 위한 주석\n\n// 실질적으로 사용자에게 보여지는 부분\n// name, picture, rating을 App에서 받아옴\nfunction Food({ name, picture, rating }) {\n  return (\n    <div>\n      <h2>I like {name} </h2>\n      <h4>{rating}/5.0</h4>\n      <img src={picture} alt={name} />\n    </div>\n  );\n}\n\n// 정보 display에 사용되는 배열\nconst foodILike = [\n  {\n    id: 1,\n    name: \"Kimchi\",\n    image:\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\n    rating: 5,\n  },\n\n  {\n    id: 2,\n    name: \"Samgyeopsal\",\n    image:\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\n    rating: 4.9,\n  },\n\n  {\n    id: 3,\n    name: \"Bibimbap\",\n    image:\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\n    rating: 4.8,\n  },\n\n  {\n    id: 4,\n    name: \"Doncasu\",\n    image:\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\n    rating: 3.9,\n  },\n\n  {\n    id: 5,\n    name: \"Kimbap\",\n    image:\n      \"https://bapuri.co.kr/new2/upload/menu_01/2016_12_16/hero_qGmO3_2016_12_16_15_13_27.jpg\",\n    rating: 4.7,\n  },\n];\n\nfunction App() {\n  return (\n    //foodILiKe 배열에 map 함수 사용, dish로 받아옴 (1개씩), 각각 새로운 변수에 대입\n    <div>\n      {foodILike.map((dish) => (\n        <Food\n          key={dish.id}\n          name={dish.name}\n          picture={dish.image}\n          rating={dish.rating}\n        />\n      ))}\n    </div>\n  );\n}\n\n// propTypes 모듈 이용 --> type 관련\nFood.propTypes = {\n  // isRequired : 무조건 존재해야함\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n\n  // number로만 끝나면 무조건 존재해야하는 것은 아니지만\n  // 가운데 자리에 위치한 number 자료형이여야 한다는 뜻\n  rating: PropTypes.number,\n};\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />,  document.getElementById('root'));\n"],"sourceRoot":""}